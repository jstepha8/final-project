/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "memorymap.h"
#include "tim.h"
#include "usart.h"
#include "usb.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd1602.h"
#include <stdio.h>
#include <string.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t pMillis, cMillis;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
GPIO_InitTypeDef myGPIO_InitStruct = {0};
uint8_t humInt, humDec, tempCInt, tempCDec;
float tempF = 0;
uint32_t previousTimeInms = 0;
uint32_t currentTimeInms = 0;
uint32_t previousReadTime = 0;
uint8_t keyPressed = 0;
uint8_t setTemp = 70;
uint8_t settingTemp = 0;

// Wait for low signal
// Time out at 255 ticks
uint8_t WaitForLow()
{
  uint32_t start = HAL_GetTick();
  while((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)))
  {
    if (HAL_GetTick() - start >= UINT8_MAX){
      return 0;
    }
  }
  return 1;
}

// Wait for high signal
// Time out at 255 ticks
uint8_t WaitForHigh()
{
  uint32_t start = HAL_GetTick();
  while(!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4)))
  {
    if (HAL_GetTick() - start >= UINT8_MAX){
      return 0;
    }
  }
  return 1;
}

// Send start signal to dht11
// - set pin low for 20ms
// - set pin high for 40us
// - wait for dht11 to pull pin low
// - wait for dht11 to pull pin high
uint8_t DHT11_SendStartSignal(void)
{
  uint8_t response = 0;
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
  GPIO_InitStructPrivate.Pin = GPIO_PIN_4;
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate); // set the pin as output
  
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);   // pull the pin low
  HAL_Delay(20);   // wait for 20ms
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);   // pull the pin high
  Delay_us (40);   // wait for 40us

  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate); // set the pin as input
  response = WaitForLow();
  response = WaitForHigh();

  return response;
}

// Get one byte from DHT11
uint8_t DHT11_ReadByte()
{
  uint8_t a, b = 0;
  for (a = 0; a < 8; a++)
  {
    WaitForHigh();
    Delay_us(40);   // wait for 40 us (threshold is ~28 us)
    if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4))) // Bit is 0 if pin is low
      b&= ~(1<<(7-a));
    else // Bit is 1 if pin is still high
      b|= (1<<(7-a));
    WaitForLow();
  }
  return b;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  char msg[32];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_MEMORYMAP_Init();
  MX_TIM16_Init();
  MX_USART1_UART_Init();
  MX_USB_PCD_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  // Init LCD
  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
  LCD_Init();
  LCD_Cls();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
  TIM16->CCR1 = 20;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    currentTimeInms = HAL_GetTick();
    // Only attempt to read 2 seconds after last successful read
    if ((currentTimeInms - previousReadTime > 2500) && DHT11_SendStartSignal())
    {
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
      char buffer[16] = { 0 };
      LCD_GotoXY(0, 0);

      humInt = DHT11_ReadByte(); // Relative humidity integral
      humDec = DHT11_ReadByte(); // Relative humidity decimal
      tempCInt = DHT11_ReadByte(); // Celsius integral
      tempCDec = DHT11_ReadByte(); // Celsius decimal
      tempF = ((float)tempCInt + (float)(tempCDec/10.0)) * 9/5 + 32;
      sprintf(buffer,"%d.%d %%  %d F  ", humInt, humDec, (int)round(tempF));
      LCD_Print(buffer);

      
      LCD_GotoXY(0, 1);
      if (setTemp == 0)
      {
        sprintf(buffer, "Set Temp:  F   ");
      }
      else
      {
        sprintf(buffer, "Set Temp: %d F ", setTemp);
      }
      LCD_Print(buffer);

      previousReadTime = HAL_GetTick();
    }

    if (settingTemp)
    {
      char buffer[16] = { 0 };
      sprintf(buffer, "Set Temp: %d F ", setTemp);
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}

/* USER CODE BEGIN 4 */
void NumButtonPress(uint8_t num)
{
  if (settingTemp)
  {
    if (setTemp == 0)
    {
      setTemp = num;
    }
    else
    {
      setTemp = setTemp * 10 + num;
      settingTemp = 0;
    }
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  currentTimeInms = HAL_GetTick();
  if (currentTimeInms - previousTimeInms > 500) {
    myGPIO_InitStruct.Pin = Key_C1_Pin|Key_C2_Pin|Key_C3_Pin|Key_C4_Pin;
    myGPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    myGPIO_InitStruct.Pull = GPIO_PULLDOWN;
    myGPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &myGPIO_InitStruct);

    HAL_GPIO_WritePin(Key_R1_GPIO_Port, Key_R1_Pin, 1);
    HAL_GPIO_WritePin(Key_R2_GPIO_Port, Key_R2_Pin, 0);
    HAL_GPIO_WritePin(Key_R3_GPIO_Port, Key_R3_Pin, 0);
    HAL_GPIO_WritePin(Key_R4_GPIO_Port, Key_R4_Pin, 0);

    if(GPIO_Pin == Key_C1_Pin && HAL_GPIO_ReadPin(Key_C1_GPIO_Port, Key_C1_Pin))
    {
      NumButtonPress(1);
      keyPressed = 49; //ASCII value of 1
    }
    else if(GPIO_Pin == Key_C2_Pin && HAL_GPIO_ReadPin(Key_C2_GPIO_Port, Key_C2_Pin))
    {
      NumButtonPress(2);
      keyPressed = 50; //ASCII value of 2
    }
    else if(GPIO_Pin == Key_C3_Pin && HAL_GPIO_ReadPin(Key_C3_GPIO_Port, Key_C3_Pin))
    {
      NumButtonPress(3);
      keyPressed = 51; //ASCII value of 3
    }
    else if(GPIO_Pin == Key_C4_Pin && HAL_GPIO_ReadPin(Key_C4_GPIO_Port, Key_C4_Pin))
    {
      keyPressed = 65; //ASCII value of A
    }

    HAL_GPIO_WritePin(Key_R1_GPIO_Port, Key_R1_Pin, 0);
    HAL_GPIO_WritePin(Key_R2_GPIO_Port, Key_R2_Pin, 1);
    HAL_GPIO_WritePin(Key_R3_GPIO_Port, Key_R3_Pin, 0);
    HAL_GPIO_WritePin(Key_R4_GPIO_Port, Key_R4_Pin, 0);

    if(GPIO_Pin == Key_C1_Pin && HAL_GPIO_ReadPin(Key_C1_GPIO_Port, Key_C1_Pin))
    {
      NumButtonPress(4);
      keyPressed = 52; //ASCII value of 4
    }
    else if(GPIO_Pin == Key_C2_Pin && HAL_GPIO_ReadPin(Key_C2_GPIO_Port, Key_C2_Pin))
    {
      NumButtonPress(5);
      keyPressed = 53; //ASCII value of 5
    }
    else if(GPIO_Pin == Key_C3_Pin && HAL_GPIO_ReadPin(Key_C3_GPIO_Port, Key_C3_Pin))
    {
      NumButtonPress(6);
      keyPressed = 54; //ASCII value of 6
    }
    else if(GPIO_Pin == Key_C4_Pin && HAL_GPIO_ReadPin(Key_C4_GPIO_Port, Key_C4_Pin))
    {
      keyPressed = 66; //ASCII value of B
    }

    HAL_GPIO_WritePin(Key_R1_GPIO_Port, Key_R1_Pin, 0);
    HAL_GPIO_WritePin(Key_R2_GPIO_Port, Key_R2_Pin, 0);
    HAL_GPIO_WritePin(Key_R3_GPIO_Port, Key_R3_Pin, 1);
    HAL_GPIO_WritePin(Key_R4_GPIO_Port, Key_R4_Pin, 0);

    if(GPIO_Pin == Key_C1_Pin && HAL_GPIO_ReadPin(Key_C1_GPIO_Port, Key_C1_Pin))
    {
      NumButtonPress(7);
      keyPressed = 55; //ASCII value of 7
    }
    else if(GPIO_Pin == Key_C2_Pin && HAL_GPIO_ReadPin(Key_C2_GPIO_Port, Key_C2_Pin))
    {
      NumButtonPress(8);
      keyPressed = 56; //ASCII value of 8
    }
    else if(GPIO_Pin == Key_C3_Pin && HAL_GPIO_ReadPin(Key_C3_GPIO_Port, Key_C3_Pin))
    {
      NumButtonPress(9);
      keyPressed = 57; //ASCII value of 9
    }
    else if(GPIO_Pin == Key_C4_Pin && HAL_GPIO_ReadPin(Key_C4_GPIO_Port, Key_C4_Pin))
    {
      keyPressed = 67; //ASCII value of C
    }

    HAL_GPIO_WritePin(Key_R1_GPIO_Port, Key_R1_Pin, 0);
    HAL_GPIO_WritePin(Key_R2_GPIO_Port, Key_R2_Pin, 0);
    HAL_GPIO_WritePin(Key_R3_GPIO_Port, Key_R3_Pin, 0);
    HAL_GPIO_WritePin(Key_R4_GPIO_Port, Key_R4_Pin, 1);

    if(GPIO_Pin == Key_C1_Pin && HAL_GPIO_ReadPin(Key_C1_GPIO_Port, Key_C1_Pin))
    {
      keyPressed = 42; //ASCII value of *
    }
    else if(GPIO_Pin == Key_C2_Pin && HAL_GPIO_ReadPin(Key_C2_GPIO_Port, Key_C2_Pin))
    {
      NumButtonPress(0);
      keyPressed = 48; //ASCII value of 0
    }
    else if(GPIO_Pin == Key_C3_Pin && HAL_GPIO_ReadPin(Key_C3_GPIO_Port, Key_C3_Pin))
    {
      settingTemp = 1;
      setTemp = 0;
      keyPressed = 35; //ASCII value of #
    }
    else if(GPIO_Pin == Key_C4_Pin && HAL_GPIO_ReadPin(Key_C4_GPIO_Port, Key_C4_Pin))
    {
      keyPressed = 68; //ASCII value of D
    }

    HAL_GPIO_WritePin(Key_R1_GPIO_Port, Key_R1_Pin, 1);
    HAL_GPIO_WritePin(Key_R2_GPIO_Port, Key_R2_Pin, 1);
    HAL_GPIO_WritePin(Key_R3_GPIO_Port, Key_R3_Pin, 1);
    HAL_GPIO_WritePin(Key_R4_GPIO_Port, Key_R4_Pin, 1);

    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    myGPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    myGPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(Key_C1_GPIO_Port, &myGPIO_InitStruct);

    previousTimeInms = currentTimeInms;
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
